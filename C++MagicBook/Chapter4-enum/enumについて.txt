この文章は、enum.cppを見た後、又は見ながら読むことを推奨する

Cからある既存のenumにはいくつかの課題が存在している
それは、
1.列挙子の名前衝突が起こりやすい
2.列挙子で定義した以外の値を列挙型変数に格納することができる
3.列挙子の代わりに整数値を利用できる
この3つだ

enum classはこれらの問題を解決してくれる

既存のenumはスコープなし列挙型、enum classはスコープ付き列挙型と呼ばれる

enum classでは、スコープを指定することで、名前の衝突を防いでくれる
それに比べて、既存のenumの列挙子はグローバルなスコープを持つため、他の定義との名前衝突の危険性が高くなる


enum classでは、enum.cppでコメントしている通り、列挙子以外の値を設定できない
だが、既存のenumでは、整数値を直接代入したり、列挙子範囲外の整数値も代入することができる

既存のenumは配列インデックスに利用することができるが、enum classではそれが出来ない
※enum.cpp出も書いた通り、enum classでも配列インデックスに利用する方法はある
両者ともに一長一短あるので、それをうまく使い分けることでより見やすく効率的なコードを書くことができると思われる


C++のenumと、C言語のenumの違い
C++のenum(既存の方)は、C言語のenumと違い、typedefする必要がない

C言語のenumは列挙型の定義の際、typedefを利用して別名定義するのが一般出来↓
typedef enum
{
	hoge,
	boke,
} NAME;

C++のenumではtypedefを利用しなくても、型名を使用して変数定義が可能になっている↓
enum NAME
{
	hoge,
	boke,
};

C++のenumではスコープ解決演算子を利用することができる

※上記のenumを使用
int main(void)
{
	両方とも可能
	NAME x = hoge;			型名なし
	NAME y = NAME::hoge;	型名あり
}

C++のenumではenum class同様、型名を自分で決めることができる

enum NAME : short
{
	hoge,
	boke,
};